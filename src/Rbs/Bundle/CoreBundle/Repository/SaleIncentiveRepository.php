<?php

namespace Rbs\Bundle\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Rbs\Bundle\CoreBundle\Entity\SaleIncentive;
use Rbs\Bundle\CoreBundle\Entity\TransportIncentive;

/**
 * SaleIncentiveRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SaleIncentiveRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function getAllMonthGroupIncentive()
    {
        $query = $this->createQueryBuilder('si');
        $query->join('si.category', 'c');
        $query->distinct();
        $query->select('si.amount');
        $query->addSelect('si.quantity');
        $query->addSelect('si.group');
        $query->where('si.deletedAt IS NULL');
        $query->andWhere('si.durationType = :month');
        $query->andWhere('si.status = :CURRENT');
        $query->orderBy('si.quantity', 'ASC');
        $query->setParameters(array('month'=>SaleIncentive::MONTH, 'CURRENT'=>SaleIncentive::CURRENT));

        return $query->getQuery()->getResult();
    }

    public function getAllYearGroupIncentive()
    {
        $query = $this->createQueryBuilder('si');
        $query->distinct();
        $query->select('si.amount');
        $query->addSelect('si.quantity');
        $query->addSelect('si.group');
        $query->where('si.deletedAt IS NULL');
        $query->andWhere('si.durationType = :year');
        $query->andWhere('si.status = :CURRENT');
        $query->orderBy('si.quantity', 'ASC');
        $query->setParameters(array('year'=>SaleIncentive::YEAR, 'CURRENT'=>SaleIncentive::CURRENT));

        return $query->getQuery()->getResult();
    }
    
    public function getAllMonthIncentiveByMonthGroup()
    {
        $query = $this->createQueryBuilder('si');
        $query->join('si.category', 'c');
        $query->select('c.name');
        $query->addSelect('si.group');
        $query->where('si.deletedAt IS NULL');
        $query->andWhere('si.durationType = :month');
        $query->andWhere('si.status = :CURRENT');
        $query->orderBy('si.quantity', 'ASC');
        $query->setParameters(array('month'=>SaleIncentive::MONTH, 'CURRENT'=>SaleIncentive::CURRENT));

        return $query->getQuery()->getResult();
    }

    public function getTotalMonthGroupName()
    {
        $query = $this->createQueryBuilder('si');
        $query->select('si.group');
        $query->where('si.deletedAt IS NULL');
        $query->andWhere('si.durationType = :month');
        $query->andWhere('si.status = :CURRENT');
        $query->setParameters(array('month'=>SaleIncentive::MONTH, 'CURRENT'=>SaleIncentive::CURRENT));
        $query->groupBy('si.group');
        $query->orderBy('si.quantity', 'ASC');

        return $query->getQuery()->getScalarResult();
    }

    public function getAllYearIncentiveByMonthGroup()
    {
        $query = $this->createQueryBuilder('si');
        $query->join('si.category', 'c');
        $query->select('c.name');
        $query->addSelect('si.group');
        $query->where('si.deletedAt IS NULL');
        $query->andWhere('si.durationType = :YEAR');
        $query->andWhere('si.status = :CURRENT');
        $query->orderBy('si.quantity', 'ASC');
        $query->setParameters(array('YEAR'=>SaleIncentive::YEAR, 'CURRENT'=>SaleIncentive::CURRENT));

        return $query->getQuery()->getResult();
    }

    public function getTotalYearGroupName()
    {
        $query = $this->createQueryBuilder('si');
        $query->select('si.group');
        $query->where('si.deletedAt IS NULL');
        $query->andWhere('si.durationType = :YEAR');
        $query->andWhere('si.status = :CURRENT');
        $query->setParameters(array('YEAR'=>SaleIncentive::YEAR, 'CURRENT'=>SaleIncentive::CURRENT));
        $query->groupBy('si.group');
        $query->orderBy('si.quantity', 'ASC');

        return $query->getQuery()->getScalarResult();
    }

    public function getSalesIncentive($category, $quantity, $durationType)
    {
        $query = $this->createQueryBuilder('si');
        $query->join('si.category', 'c');
        $query->select('si.amount');
        $query->addSelect('si.quantity');
        $query->addSelect('c.id as categoryId');
        $query->where('si.deletedAt IS NULL');
        $query->andWhere('c.id = :category');
        $query->andWhere('si.durationType = :durationType');
        $query->andWhere('si.quantity > :quantity');
        $query->andWhere('si.status = :CURRENT');
        $query->orderBy('si.quantity', 'ASC');
        $query->setMaxResults('1');
        $query->setParameters(array('category'=>$category,
            'quantity'=>$quantity, 'durationType'=>$durationType, 'CURRENT'=>SaleIncentive::CURRENT));

        return $query->getQuery()->getResult();
    }
    
    public function getSalesIncentiveForStatusChange($category, $quantity, $durationType, $group)
    {
        $query = $this->createQueryBuilder('si');
        $query->join('si.category', 'c');
        $query->where('si.deletedAt IS NULL');
        $query->andWhere('c.id = :category');
        $query->andWhere('si.durationType = :durationType');
        $query->andWhere('si.quantity = :quantity');
        $query->andWhere('si.status = :CURRENT');
        $query->andWhere('si.group = :group');
        $query->setParameters(array('category'=>$category, 'quantity'=>$quantity, 
            'durationType'=>$durationType, 'group'=>$group, 'CURRENT'=>SaleIncentive::CURRENT));

        return $query->getQuery()->getResult();
    }
}
