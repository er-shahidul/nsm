<?php

namespace Rbs\Bundle\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Rbs\Bundle\CoreBundle\Entity\Item;
use Rbs\Bundle\CoreBundle\Entity\ItemPrice;
use Rbs\Bundle\CoreBundle\Entity\Location;

/**
 * ItemPriceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemPriceRepository extends EntityRepository
{

    /**
     * @param Item $item
     * @param Location $location
     * @return float
     */
    public function getCurrentPrice(Item $item, Location $location)
    {
        $itemPrice = $this->findOneBy(array('active' => 1, 'item' => $item, 'location' => $location));

        return $itemPrice ? $itemPrice->getPrice() : 0;
    }

    public function getAllCurrentPrice(Item $item)
    {
        return $this->findBy(array('active' => 1, 'item' => $item));
    }

    public function getCurrentPriceAsArray(Item $item)
    {
        $output = array();

        /** @var ItemPrice $item */
        foreach ($this->getAllCurrentPrice($item) as $item) {
            $output[$item->getLocation()->getId()] = $item->getPrice();
        }

        return $output;
    }

    public function save($postDate, $locations, $item, $itemPrices)
    {
        $amount = $postDate['amount'];

        /** @var Location $location */

        foreach ($locations as $location) {
            $currentPrice = isset($itemPrices[$location->getId()]) ? (float)$itemPrices[$location->getId()] : 0;
            $newPrice = (float)$amount[$location->getId()];

            if ($currentPrice != $newPrice) {

                /** @var ItemPrice $oldItemPrice */
                $oldItemPrice = $this->findOneBy(array('active' => 1, 'item' => $item, 'location' => $location));
                if ($oldItemPrice) {
                    $oldItemPrice->setActive(false);
                }

                $itemPrice = new ItemPrice();
                $itemPrice->setLocation($location);
                $itemPrice->setPrice($amount[$location->getId()]);
                $itemPrice->setOldPrice($oldItemPrice ? $oldItemPrice->getPrice() : 0);
                $itemPrice->setItem($item);
                $itemPrice->setActive(true);
                $this->_em->persist($itemPrice);
            }
        }

        $this->_em->flush();
    }
}