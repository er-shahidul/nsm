<?php

namespace Rbs\Bundle\SalesBundle\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Rbs\Bundle\SalesBundle\Entity\Target;

/**
 * TargetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TargetRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        /** @var Target $target */
        foreach ($data->getChildEntities() as $target) {
            $target->setZilla($data->getZilla());
            $target->setUpozilla($data->getUpozilla());
            if($target->getStartDate() == null or $target->getEndDate() == null){
                $target->setStartDate(null);
                $target->setEndDate(null);
            }else{
                $target->setStartDate($this->getDateObject("01-".$target->getStartDate()));
                $target->setEndDate($this->getDateObject($this->getDateWithLastDateOfMonth("01-".$target->getEndDate())));
            }
            $this->_em->persist($target);
        }
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data, $endDate)
    {
        $data->setEndDate($this->getDateObject($this->getDateWithLastDateOfMonth($endDate)));

        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    /**
     * @param $stringDate
     * @return String
     */
    protected function getDateWithLastDateOfMonth($stringDate)
    {
        $dateWithLastDateOfMonth = date('t-m-Y', strtotime($stringDate));
        return $dateWithLastDateOfMonth;
    }

    /**
     * @param $stringDate
     * @return DateTime
     */
    protected function getDateObject($stringDate)
    {
        $dateObject = new DateTime($stringDate);
        return $dateObject;
    }
    
    public function srListByParentId($parentId)
    {
        $query = $this->createQueryBuilder('t');
        $query->join('t.user', 'u');
        $query->where('u.parentId = :parentId');
        $query->andWhere('t.quantity > 0 or t.quantity is not null');
        $query->andWhere('t.quantity > t.remaining');
        $query->andWhere('t.status = :RUNNING');
        $query->andWhere('t.startDate is not null');
        $query->andWhere('t.endDate is not null');
        $query->setParameter('parentId', $parentId);
        $query->setParameter('RUNNING', Target::RUNNING);
        $query->orderBy('t.createdAt', 'DESC');

        return $query->getQuery()->getResult();
    }

    public function myTarget($userId)
    {
        $query = $this->createQueryBuilder('t');
        $query->where('t.user = :userId');
        $query->andWhere('t.quantity > 0 or t.quantity is not null');
        $query->andWhere('t.quantity > t.remaining');
        $query->andWhere('t.status = :RUNNING');
        $query->andWhere('t.startDate is not null');
        $query->andWhere('t.endDate is not null');
        $query->setParameter('userId', $userId);
        $query->setParameter('RUNNING', Target::RUNNING);
        $query->orderBy('t.createdAt', 'DESC');

        return $query->getQuery()->getResult();
    }

    public function getUserTarget($userId)
    {
        $query = $this->createQueryBuilder('t');
        $query->where('t.user = :userId');
        $query->andWhere('t.quantity > 0 or t.quantity is not null');
        $query->andWhere('t.quantity > t.remaining');
        $query->andWhere('t.status = :RUNNING');
        $query->andWhere('t.startDate is not null');
        $query->andWhere('t.endDate is not null');
        $query->setParameter('userId', $userId);
        $query->setParameter('RUNNING', Target::RUNNING);

        return $query->getQuery()->getResult();
    }

    public function getSRUserTarget($userId)
    {
        $query = $this->createQueryBuilder('t');
        $query->where('t.user = :userId');
        $query->andWhere('t.status = :RUNNING');
        $query->setParameter('userId', $userId);
        $query->setParameter('RUNNING', Target::RUNNING);

        return $query->getQuery()->getResult();
    }

    public function findMyLocationTargetRSM($zilla)
    {
        $query = $this->createQueryBuilder('t');
        $query->join('t.location', 'l');
        $query->where('l.id = :zilla');
        $query->andWhere('t.status = :RUNNING');
        $query->setParameter('zilla', $zilla);
        $query->setParameter('RUNNING', Target::RUNNING);

        return $query->getQuery()->getResult();
    }
}
