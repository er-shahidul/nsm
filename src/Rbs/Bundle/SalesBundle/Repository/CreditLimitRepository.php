<?php

namespace Rbs\Bundle\SalesBundle\Repository;

use Doctrine\Common\Util\Debug;
use Doctrine\ORM\EntityRepository;
use Rbs\Bundle\SalesBundle\Entity\CreditLimit;
use Rbs\Bundle\SalesBundle\Entity\Order;
use Rbs\Bundle\SalesBundle\Entity\OrderItem;
use Rbs\Bundle\UserBundle\Entity\User;

/**
 * CreditLimitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CreditLimitRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function creditLimitNotifications()
    {
        $notificationTime = new \DateTime('now');
        $notificationTime->add(new \DateInterval('P15D'));
        $notificationTime->format('Y-m-d');

        $query = $this->createQueryBuilder('cl');
        $query->join('cl.agent', 'a');
        $query->join('a.user', 'u');
        $query->join('u.profile', 'p');
        $query->join('cl.category', 'c');
        $query->select('p.fullName as agentName');
        $query->addSelect('a.id as agentId');
        $query->addSelect('c.name as categoryName');
        $query->addSelect('c.id as categoryId');
        $query->addSelect('cl.id as creditLimitId');
        $query->addSelect('cl.endDate as endDate');
        $query->where('cl.endDate < :now');
        $query->andWhere('u.userType = :AGENT');
        $query->andWhere('cl.status = :ACTIVE');
        $query->setParameters(array('AGENT'=> User::AGENT, 'now' => $notificationTime, 'ACTIVE' => CreditLimit::ACTIVE));
        $query->groupBy('cl.agent', 'cl.category');

        return $query->getQuery()->getResult();
    }

    public function creditLimitNotificationCount()
    {
        $notificationTime = new \DateTime('now');
        $notificationTime->add(new \DateInterval('P15D'));
        $notificationTime->format('Y-m-d');

        $query = $this->createQueryBuilder('cl');
        $query->join('cl.agent', 'a');
        $query->join('a.user', 'u');
        $query->join('cl.category', 'c');
        $query->select('COUNT(cl.id)');
        $query->where('cl.endDate < :now');
        $query->andWhere('u.userType = :AGENT');
        $query->andWhere('cl.status = :ACTIVE');
        $query->setParameters(array('AGENT'=> User::AGENT, 'now' => $notificationTime, 'ACTIVE' => CreditLimit::ACTIVE));

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getCategoryWiseCreditLimit(Order $order)
    {
        $categoryCredit = array();

        /** @var OrderItem $orderItem */
        foreach ($order->getOrderItems() as $orderItem) {
            $category = $orderItem->getItem()->getCategory()[0];
            
            $data = $this->_em->getRepository('RbsSalesBundle:OrderItem')->getCreditStatus($orderItem);
            if(isset($data[0])){
                $data['name'] = $category->getName();
                $data['totalAmount'] = (float)$data[0]['totalAmount'];
                $data['paidAmount'] = (float)$data[0]['paidAmount'];
                $data['creditRemain'] = (float)$data[0]['creditRemain'];
            }else{
                $data['name'] = $category->getName();
                $data['totalAmount'] = (float)$data['totalAmount'];
                $data['paidAmount'] = (float)$data['paidAmount'];
                $data['creditRemain'] = (float)$data['creditRemain'];
            }

            $categoryCredit[$category->getId()] = $data;
        }

        return $categoryCredit;
    }
    
    public function isOverCreditLimitInAnyCategory($orderItemCategoryTotal, $categoryWiseCreditSummary)
    {
        $isOverCredit = false;
        
        foreach ($orderItemCategoryTotal as $categoryId => $categoryTotal) {
            if ($categoryWiseCreditSummary[$categoryId]['creditRemain'] < $categoryTotal){
                $isOverCredit = true;
                break;
            }
        }
        
        return $isOverCredit;
    }
    
    public function getAllPreviousCreditLimit($agent, $category)
    {
        $query = $this->createQueryBuilder('cl');
        $query->where('cl.agent = :agent');
        $query->andWhere('cl.category = :category');
        $query->setParameters(array('agent'=>$agent, 'category'=>$category));

        return $query->getQuery()->getResult();
    }
    
    public function getCreditLimitByDate($orderItem)
    {
        $query = $this->createQueryBuilder('cl');
        $query->join('cl.agent', 'a');
        $query->join('cl.category', 'c');
        $query->where('cl.startDate < :orderDate');
        $query->andWhere('cl.endDate > :orderDate');
        $query->andWhere('cl.agent = :agent');
        $query->andWhere('cl.category = :category');
        $query->andWhere('cl.amount > 0');
        $query->setMaxResults(1);
        $query->orderBy('cl.createdAt', 'DESC');
        $query->setParameters(array('agent'=> $orderItem->getOrder()->getAgent(), 
            'orderDate'=> $orderItem->getOrder()->getCreatedAt(), 'category'=>$orderItem->getItem()->getCategory()[0]));
        
        return $query->getQuery()->getOneOrNullResult();
    }
}
