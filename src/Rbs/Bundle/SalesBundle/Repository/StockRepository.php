<?php

namespace Rbs\Bundle\SalesBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Rbs\Bundle\CoreBundle\Entity\Depo;
use Rbs\Bundle\CoreBundle\Entity\Item;
use Rbs\Bundle\CoreBundle\Entity\ItemType;
use Rbs\Bundle\SalesBundle\Entity\Agent;
use Rbs\Bundle\SalesBundle\Entity\ChickenSetForAgent;
use Rbs\Bundle\SalesBundle\Entity\Delivery;
use Rbs\Bundle\SalesBundle\Entity\DeliveryItem;
use Rbs\Bundle\SalesBundle\Entity\Order;
use Rbs\Bundle\SalesBundle\Entity\OrderItem;
use Rbs\Bundle\SalesBundle\Entity\Stock;
use Rbs\Bundle\SalesBundle\Entity\StockHistory;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Form\Form;

/**
 * StockRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function addStockToOnHold(Order $order, Depo $depo = null)
    {
        if (!$depo) $depo = $order->getDepo();

        /** @var OrderItem $orderItem */
        foreach ($order->getOrderItems() as $orderItem) {
            /** @var Stock $stock */
            $stock = $this->findOneBy(
                array(
                    'item' => $orderItem->getItem()->getId(),
                    'depo' => $depo->getId(),
                )
            );
            $stock->setOnHold($stock->getOnHold() + $orderItem->getQuantity());
            $this->_em->persist($stock);
            $this->_em->flush();
        }
    }

    public function removeStock(Delivery $delivery)
    {
        /** @var DeliveryItem $deliveryItem */
        foreach ($delivery->getDeliveryItems() as $deliveryItem) {
            $this->removeStockFromDepo($deliveryItem->getOrderItem()->getItem(), $delivery->getDepo(), $deliveryItem->getQty());
        }
    }

    public function removeStockFromDepo($item, Depo $depo, $qty, $removeFrom = array('hand', 'hold'))
    {
        $stock = $this->findOneBy(
            array(
                'item' => $item instanceof Item ? $item->getId() : $item,
                'depo' => $depo->getId(),
            )
        );

        if (!$stock) return;

        if (in_array('hold', $removeFrom)) {
            $stockOnHoldQty = $stock->getOnHold() - $qty;
            $stock->setOnHold($stockOnHoldQty > 0 ? $stockOnHoldQty : 0); // $stockQty > 0 ? $stockQty : 0
        }

        if (in_array('hand', $removeFrom)) {
            $stockOnHandQty = $stock->getOnHand() - $qty;
            $stock->setOnHand($stockOnHandQty > 0 ? $stockOnHandQty : 0); // $stockQty > 0 ? $stockQty : 0
        }

        $this->_em->persist($stock);
        $this->_em->flush($stock);
    }

    public function updateStock(Order $order, Depo $depo, $oldOrderItems)
    {
        $this->subtractFromOnHold($oldOrderItems, $depo);
        $this->addStockToOnHold($order, $depo);
    }

    public function subtractFromOnHold(array $items, $depo)
    {
        foreach ($items as $itemId => $qty) {
            $this->removeStockFromDepo($itemId, $depo, $qty, array('hold'));
        }
    }

    public function extractOrderItemQuantity(Order $order)
    {
        $data = array();
        /** @var OrderItem $orderItem */
        foreach ($order->getOrderItems() as $orderItem) {
            $data[$orderItem->getItem()->getId()] = $orderItem->getQuantity();
        }

        return $data;
    }

    public function save(Request $request,Form $form, StockHistory $stockHistory)
    {
        $stockRepo = $this->_em->getRepository('RbsSalesBundle:Stock');
        $stockID = (int)$request->request->all()['stock']['stockID'];
        $stock = $stockRepo->find($stockID);

        $quantity = $form->getData()->getQuantity();
        $quantity = $stock->getOnHand() + $quantity;

        $stock->setOnHand($quantity);
        $stockHistory->setStock($stock);
        $stockHistory->setFromDepo($stock->getDepo());

        $stockRepo->update($stock);
        $this->create($stockHistory);
    }

    // TODO: Need to implement on order approve 1st step
    public function hasStock(OrderItem $orderItem, Depo $depo, Agent $agent = null) {

        $item = $orderItem->getItem();

        if ($orderItem->getItem()->getItemType() == ItemType::Chick) {
            /** @var ChickenSetForAgent $chickenCheckForAgent */
            $chickenCheckForAgent = $this->_em->getRepository('RbsSalesBundle:ChickenSetForAgent')->findOneBy(array(
                'item' => $item->getId(), 'agent' => $agent->getId(),
            ));

            return array(
                'availableChick' => $chickenCheckForAgent ? $chickenCheckForAgent->isStockAvailable($orderItem->getQuantity()) : 0,
                'isAvailableQty' => $chickenCheckForAgent ? $chickenCheckForAgent->getQuantity() : false,
            );
        }

        $stockItem = $this->findOneBy(
            array('item' => $orderItem->getItem()->getId(), 'depo' => $depo)
        );

        return $stockItem && $stockItem->isStockAvailable($orderItem->getQuantity());
    }

    public function getAllStacks($data)
    {
        if(!empty($data)){
            $query = $this->createQueryBuilder('s');
            $query->select('s.id');
            $query->addSelect('i.name as itemName');
            $query->addSelect('d.name');
            $query->addSelect('s.onHold');
            $query->addSelect('s.onHand');
            $query->addSelect('s.availableOnDemand');
            $query->leftJoin('s.item', 'i');
            $query->leftJoin('s.depo', 'd');

            if(!empty($data['depo'])){
                $this->handleSearchByDepo($data['depo'], $query);
            }
            if(!empty($data['item'])){
                $this->handleSearchByItem($data['item'], $query);
            }

            return $query->getQuery()->getResult();
        } else{
            return array();
        }
    }

    protected function handleSearchByDepo($depo, $query)
    {
        if (!empty($depo)) {
            $query->where('s.depo = :depo');
            $query->setParameter('depo', $depo);
        }
    }

    protected function handleSearchByItem($item, $query)
    {
        if (!empty($item)) {
            $query->where('s.item = :item');
            $query->setParameter('item', $item);
        }
    }

}