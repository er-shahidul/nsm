<?php

namespace Rbs\Bundle\SalesBundle\Repository;

use DateTime;
use Doctrine\Common\Util\Debug;
use Doctrine\ORM\EntityRepository;
use Rbs\Bundle\CoreBundle\Entity\Depo;
use Rbs\Bundle\SalesBundle\Entity\Delivery;
use Rbs\Bundle\SalesBundle\Entity\DeliveryItem;
use Rbs\Bundle\SalesBundle\Entity\Order;

/**
 * DeliveryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeliveryRepository extends EntityRepository
{
    public function createDelivery($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }
    
    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }
  
    public function create(Order $order, Depo $depo, $request)
    {
        $delivery = new Delivery();
        $delivery->setDepo($depo);
        $this->_em->persist($delivery);
        $this->_em->flush();
        
        return $delivery;
    }

    public function savePartial($delivery, $data)
    {
        $output = array('orders' => array());
        foreach ($data['qty'] as $itemId => $qty) {
            $item = $this->_em->getRepository('RbsSalesBundle:OrderItem')->find($itemId);

            $deliveryItem = new DeliveryItem();
            $deliveryItem->setOrder($item->getOrder());
            $deliveryItem->setDelivery($delivery);
            $deliveryItem->setOrderItem($item);
            $deliveryItem->setQty($qty);
            $this->_em->persist($deliveryItem);

            $output['orders'][$item->getOrder()->getId()] = $item->getOrder()->getId();
        }

        $this->_em->flush();

        return $output;
    }

    public function save($delivery, $data)
    {
        $delivery->setShipped(true);
        $output = array('orders' => array());
        foreach ($data['qty'] as $orderId => $deliveryItems) {
            foreach ($deliveryItems as $itemId => $qty) {
                $order = $this->_em->getRepository('RbsSalesBundle:Order')->find($orderId);
                $item = $this->_em->getRepository('RbsSalesBundle:OrderItem')->find($itemId);

                $deliveryItem = new DeliveryItem();
                $deliveryItem->setOrder($order);
                $deliveryItem->setDelivery($delivery);
                $deliveryItem->setOrderItem($item);
                $deliveryItem->setQty($qty);

                $this->_em->persist($deliveryItem);

                $output['orders'][$order->getId()] = $order;
            }
        }

        if (!empty($data['checked-items'])) {
            $previousItems = $data['previous-items'];
            foreach ($data['checked-items'] as $orderId => $deliveryItems) {
                foreach ($deliveryItems as $itemId => $qty) {

                    if (!array_key_exists($itemId, $previousItems[$orderId])) {
                        continue;
                    }

                    $order = $this->_em->getRepository('RbsSalesBundle:Order')->find($orderId);
                    $item = $this->_em->getRepository('RbsSalesBundle:OrderItem')->find($itemId);

                    $deliveryItem = new DeliveryItem();
                    $deliveryItem->setOrder($order);
                    $deliveryItem->setDelivery($delivery);
                    $deliveryItem->setOrderItem($item);
                    $deliveryItem->setQty($previousItems[$orderId][$itemId]);

                    $this->_em->persist($deliveryItem);

                    $output['orders'][$order->getId()] = $order;
                }
            }
        }

        $this->_em->flush();

        return $output;
    }

    public function getDeliveriesForTransportIncentive($firstDateOfPreviousMonth, $lastDateOfPreviousMonth)
    {
        $query = $this->createQueryBuilder('d');
        $query->join('d.orders', 'o');
        $query->select('d.id');
        $query->where('d.createdAt >= :startDate');
        $query->andWhere('d.createdAt <= :endDate');
        $query->andWhere('o.deliveryState = :SHIPPED OR o.deliveryState = :PARTIALLY_SHIPPED');
        $query->setParameters(array('startDate'=>$firstDateOfPreviousMonth, 'endDate'=>$lastDateOfPreviousMonth, 'SHIPPED'=>Order::DELIVERY_STATE_SHIPPED, 'PARTIALLY_SHIPPED'=>Order::DELIVERY_STATE_PARTIALLY_SHIPPED));

        return $query->getQuery()->getResult();
    }
}