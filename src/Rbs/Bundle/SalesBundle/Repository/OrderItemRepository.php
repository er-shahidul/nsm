<?php

namespace Rbs\Bundle\SalesBundle\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Rbs\Bundle\SalesBundle\Entity\Order;
use Rbs\Bundle\SalesBundle\Entity\OrderItem;

/**
 * OrderItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderItemRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function orderAmountAdjust(Order $order)
    {
        $amount = $order->getPaidAmount();

        foreach($order->getOrderItems() as $orderItem){
            $dueAmount = $orderItem->getDueAmount();

            if($amount != 0 and $dueAmount != 0){
                if ($amount >= $dueAmount) {
                    $amount = $amount - $dueAmount;
                    $orderItem->setPaidAmount($dueAmount);
                } else{
                    $orderItem->setPaidAmount($amount);
                    $amount = 0;
                }
            }else{
                $orderItem->setPaidAmount(0);
            }
            $this->update($orderItem);
        }
    }

    public function getTotalOrderItemByOrder(Order $order)
    {
        $query = $this->createQueryBuilder('o');
        $query
            ->select('SUM(o.quantity) AS totalQuantity')
            ->where('o.order = :order')
            ->setParameter('order', $order);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function orderItemReport($data)
    {
        $query = $this->createQueryBuilder('oi');
        $query->join('oi.order', 'o');
        $query->join('oi.item', 'i');
        $query->select('i.name as itemName');
        $query->addSelect('i.id as id');
        $query->addSelect('SUM(oi.quantity) as quantity');
        $query->addSelect('SUM(oi.totalAmount) as totalAmount');

        $this->handleSearchByItem($data, $query);
        $this->handleSearchByTwoDate($data, $query);

        $query->andWhere('o.orderState = :COMPLETE');
        $query->setParameter('COMPLETE', Order::ORDER_STATE_COMPLETE);

        $query->groupBy('i.id');
        $query->orderBy('i.name');

        $result = $query->getQuery()->getResult();

        $data = array();
        foreach($result as $row) {
            $data[$row['id']] = $row;
        }

        return $data;
    }

    protected function handleSearchByItem($data, $query)
    {
        if (!empty($data['search']['item'])) {
            $query->where('i.id = :item');
            $query->setParameter('item', $data['search']['item']);
        }
    }

    protected function handleSearchByTwoDate($data, $query)
    {
        if (!empty($data['start_date']) && !empty($data['end_date'])) {
            $query->andWhere('o.createdAt >= :start_date');
            $query->andWhere('o.createdAt <= :end_date');
            $query->setParameter('start_date', $data['start_date'].' 00:00:01');
            $query->setParameter('end_date', $data['end_date'].' 23:59:59');
        }
    }

    public function getAmountDiff($agentId, $startDate, $endDate)
    {
        $query = $this->createQueryBuilder('oi');
        $query->join('oi.order', 'o');
        $query->join('o.agent', 'a');
        $query->join('a.user', 'u');
        $query->join('oi.item', 'i');
        $query->join('i.category', 'ca');

        $query->select('ca.name as categoryName');
        $query->addSelect('ca.id as categoryId');
        $query->addSelect('u.username as agentName');
        $query->addSelect('a.id as agentId');
        $query->addSelect('SUM(oi.paidAmount) as paidAmount');
        $query->addSelect('SUM(oi.totalAmount) as totalAmount');

        $query->where('o.agent = :agentId');
        $query->andWhere('o.orderState = :COMPLETE');

        $query->andWhere('o.createdAt >= :startDate');
        $query->andWhere('o.createdAt <= :endDate');

        $query->setParameters(array('COMPLETE' => Order::ORDER_STATE_COMPLETE, 'agentId' => $agentId, 'startDate' => $startDate, 'endDate' => $endDate));
        $query->groupBy('ca.id');

        return $query->getQuery()->getScalarResult();
    }

    public function getCreditStatus(OrderItem $orderItem)
    {
        $creditInfo = $this->_em->getRepository('RbsSalesBundle:CreditLimit')->getCreditLimitByDate($orderItem);

        if (!$creditInfo) {
            return array(
                'totalAmount' => 0,
                'paidAmount' => 0,
                'creditRemain' => 0
            );
        }
        
        $qb = $this->createQueryBuilder('oi');

        $qb->select('SUM(oi.totalAmount) AS totalAmount');
        $qb->addSelect('SUM(oi.paidAmount) AS paidAmount');
        $qb->addSelect($creditInfo->getAmount() . ' - SUM(oi.totalAmount) + SUM(oi.paidAmount) AS creditRemain');

        $qb->join('oi.item', 'i');
        $qb->join('i.category', 'c');
        $qb->join('oi.order', 'o');

        $qb->where('o.agent = :agent')->setParameter('agent', $orderItem->getOrder()->getAgent());
        $qb->andWhere('o.createdAt >= :startDate')->setParameter('startDate', $creditInfo->getStartDate());
        $qb->andWhere('o.createdAt <= :eneDate')->setParameter('eneDate', $creditInfo->getEndDate());
        $qb->andWhere('o.orderState NOT IN(:orderState)')->setParameter('orderState', array(Order::ORDER_STATE_PENDING, Order::ORDER_STATE_CANCEL));
        $qb->andWhere($qb->expr()->eq('c.id', ':categoryId'))->setParameter('categoryId', $creditInfo->getCategory()->getId());
        $qb->groupBy('c.id');
        
        return $qb->getQuery()->getResult();
    }

    public function getOrderIncentive($orderId)
    {
        $query = $this->createQueryBuilder('oi');
        $query->join('oi.order', 'o');
        $query->join('o.agent', 'a');
        $query->join('oi.item', 'i');
        $query->join('i.category', 'c');
        $query->select('SUM(oi.quantity) as quantity');
        $query->addSelect('a.id as agentId');
        $query->addSelect('c.id as categoryId');
        $query->addSelect('c.name as categoryName');
        $query->where('o.id = :orderId');
        $query->groupBy('c.id');
        $query->setParameters(array('orderId'=>$orderId));

        return $query->getQuery()->getResult();
    }


    public function getCompleteOrderItemByMonth($data)
    {
        $date = new DateTime($data['year'].'-'.$data['month']);

        $query = $this->createQueryBuilder('oi');
        $query->join('oi.order', 'o');
        $query->join('oi.item', 'i');
        $query->join('o.location', 'l');
        $query->where('o.orderState = :COMPLETE');
        $query->setParameter('COMPLETE', Order::ORDER_STATE_COMPLETE);
        if($data['item']){
            foreach ($data['item'] as $item) {
                $query->andWhere('i.id = :item');
                $query->setParameter('item', $item);
            }
        }
        if($data['zilla']){
            foreach ($data['zilla'] as $zilla){
                $query->andWhere('l.parentId = :zilla');
                $query->setParameter('zilla', $zilla);
            }
        }
        if($data['month']){
            $query->andWhere('o.createdAt >= :startDate');
            $query->setParameter('startDate', $date->format('Y-m-01'));
            $query->andWhere('o.createdAt <= :endDate');
            $query->setParameter('endDate', $date->format('Y-m-t'));
        }

        return $query->getQuery()->getResult();
    }

    public function getYearlyWiseItemSalesReport($data) {

        if(empty($data['year'])) {
            return false;
        }
        $date = new DateTime($data['year']);
        $yearlyReport = array();
        $month = array(
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December');

        if (!empty($data['year'])) {

            for ($i = 1; $i < 13; $i++) {
                $start_date = $date->format('Y-'.$i.'-01').' 00:00:01';
                $end_date = $date->format('Y-'.$i.'-t').' 23:59:59';


                $yearlyReport[$month[$i-1]] = $this->getYearlyItemSalesReport($start_date,$end_date);
            }

        }

        return $yearlyReport;
    }

    public function getYearlyItemSalesReport($start_date,$end_date)
    {
        $query = $this->createQueryBuilder('oi');
        $query->join('oi.order', 'o');
        $query->join('o.agent', 'a');
        $query->join('oi.item', 'i');
        $query->join('i.category', 'c');
        $query->select('SUM(oi.quantity) as quantity');
        $query->addSelect('i.id as itemId');
        $query->where("o.orderState = 'COMPLETE' OR o.orderState = 'PROCESSING'");
        $query->andWhere('o.createdAt >= :startDate');
        $query->setParameter('startDate', $start_date);
        $query->andWhere('o.createdAt <= :endDate');
        $query->setParameter('endDate', $end_date);
        $query->groupBy('i.id');

        $results = $query->getQuery()->getResult();

            $itemLists = array();

        foreach ($results as $itemList){
            $itemLists[$itemList['itemId']] = $itemList;
        }

        return $itemLists;
    }

    public function getUpozillaWiseItemSalesReport($data,$itemLists) {

        if(empty($data['year']) or empty($data['month'])) {
            return false;
        }

        $date = new DateTime($data['year'].'-'.$data['month']);

        $start_date = $date->format('Y-m-01'). ' 00:00:01';
        $end_date   = $date->format('Y-m-t'). ' 23:59:59';

        $sql = "SELECT SUM(sclr1) as quantity,name0 as itemName ,name2 as zilla,name3 as upozilla, id4 as upozillaId, zilla_id,id5 as itemId  FROM

                (SELECT c0_.name AS name0, (s1_.quantity) AS sclr1, c2_.name AS name2, c3_.name AS name3,u10_.zilla_id,
                 c4_.id AS id4, c0_.id AS id5 FROM sales_order_items s1_ 
                 LEFT JOIN sales_orders s5_ ON s1_.order_id = s5_.id 
                 LEFT JOIN core_items c0_ ON s1_.item_id = c0_.id 
                 LEFT JOIN core_item_types c6_ ON c0_.item_types = c6_.id 
                 LEFT JOIN core_join_items_categories c8_ ON c0_.id = c8_.item_id 
                 LEFT JOIN core_categories c7_ ON c7_.id = c8_.categories_id 
                 LEFT JOIN sales_agents s9_ ON s5_.agent_id = s9_.id 
                 LEFT JOIN user_users u10_ ON s9_.user_id = u10_.id 
                 LEFT JOIN core_locations c2_ ON u10_.zilla_id = c2_.id 
                 LEFT JOIN core_locations c3_ ON u10_.upozilla_id = c3_.id 
                 LEFT JOIN core_locations c4_ ON s5_.location_id = c4_.id 
                 WHERE (s5_.order_state = 'COMPLETE' 
                 OR s5_.order_state = 'PROCESSING') 
                 AND s5_.created_at >= '$start_date' 
                 AND s5_.created_at <= '$end_date') as tbl 
                 group by id5 ,name0,name2,name3";

        $upozillaLists = $this->_em->getConnection()->fetchAll($sql);

        $data = array();


        foreach ($upozillaLists as $upozillaList){

            $data[$upozillaList['zilla']][$upozillaList['upozilla']][$upozillaList['itemId']] = $upozillaList;
        }

            return $data;
    }

    public function getUpozillaWiseItemSalesReportExcel($data) {

        if(empty($data['year']) or empty($data['month'])) {
            return false;
        }

        $date = new DateTime($data['year'].'-'.$data['month']);

        $start_date = $date->format('Y-m-01'). ' 00:00:01';
        $end_date   = $date->format('Y-m-t'). ' 23:59:59';

        $sql = "SELECT SUM(sclr1) as quantity,name0 as itemName ,name2 as zilla,name3 as upozilla, id4 as upozillaId, zilla_id,id5 as itemId  FROM

                (SELECT c0_.name AS name0, (s1_.quantity) AS sclr1, c2_.name AS name2, c3_.name AS name3,u10_.zilla_id,
                 c4_.id AS id4, c0_.id AS id5 FROM sales_order_items s1_ 
                 LEFT JOIN sales_orders s5_ ON s1_.order_id = s5_.id 
                 LEFT JOIN core_items c0_ ON s1_.item_id = c0_.id 
                 LEFT JOIN core_item_types c6_ ON c0_.item_types = c6_.id 
                 LEFT JOIN core_join_items_categories c8_ ON c0_.id = c8_.item_id 
                 LEFT JOIN core_categories c7_ ON c7_.id = c8_.categories_id 
                 LEFT JOIN sales_agents s9_ ON s5_.agent_id = s9_.id 
                 LEFT JOIN user_users u10_ ON s9_.user_id = u10_.id 
                 LEFT JOIN core_locations c2_ ON u10_.zilla_id = c2_.id 
                 LEFT JOIN core_locations c3_ ON u10_.upozilla_id = c3_.id 
                 LEFT JOIN core_locations c4_ ON s5_.location_id = c4_.id 
                 WHERE (s5_.order_state = 'COMPLETE' 
                 OR s5_.order_state = 'PROCESSING') 
                 AND s5_.created_at >= '$start_date' 
                 AND s5_.created_at <= '$end_date') as tbl 
                 group by id5 ,name0,name2,name3";

        $upozillaLists = $this->_em->getConnection()->fetchAll($sql);

        $data = array();


        foreach ($upozillaLists as $upozillaList){

            $data[$upozillaList['zilla']][$upozillaList['upozilla']][$upozillaList['itemId']] = $upozillaList;
        }

            return $data;
    }


}
