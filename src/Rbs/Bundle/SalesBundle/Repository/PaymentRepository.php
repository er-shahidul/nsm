<?php

namespace Rbs\Bundle\SalesBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Rbs\Bundle\SalesBundle\Entity\Delivery;
use Rbs\Bundle\SalesBundle\Entity\DeliveryItem;
use Rbs\Bundle\SalesBundle\Entity\Order;
use Rbs\Bundle\SalesBundle\Entity\Payment;
use Rbs\Bundle\UserBundle\Entity\User;

/**
 * PaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function getAgentPreviousCreditLaserTotal($data)
    {
        $query = $this->createQueryBuilder('p');
        $query->join('p.agent', 'a');
        $query->join('a.user', 'u');
        $query->select('SUM(p.amount) as creditAmount');
        $query->where('u.userType = :AGENT');
        $query->andWhere('a.id = :agentId');
        $query->andWhere('p.transactionType = :CR');
        $query->andWhere('p.verified = 1');
        if (!empty($data['start_date'])) {
            $query->andWhere('p.depositDate < :startDate');
            $query->setParameter('startDate', $data['start_date'].' 00:00:00');
        }
        $query->setParameter('AGENT', User::AGENT);
        $query->setParameter('agentId', $data['agent']);
        $query->setParameter('CR', Payment::CR);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getAgentCreditLaserTotal($data)
    {
        $query = $this->createQueryBuilder('p');
        $query->join('p.agent', 'a');
        $query->join('a.user', 'u');
        $query->select('SUM(p.amount) as creditAmount');
        $query->where('u.userType = :AGENT');
        $query->andWhere('a.id = :agentId');
        $query->andWhere('p.transactionType = :CR');
        $query->andWhere('p.verified = 1');
        if (!empty($data['end_date'])) {
            $query->andWhere('p.depositDate < :endDate');
            $query->setParameter('endDate', $data['end_date'].' 23:59:59');
        }
        $query->setParameter('AGENT', User::AGENT);
        $query->setParameter('agentId', $data['agent']);
        $query->setParameter('CR', Payment::CR);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getAgentPreviousDebitLaserTotal($data)
    {
        $query = $this->createQueryBuilder('p');
        $query->join('p.agent', 'a');
        $query->join('a.user', 'u');
        $query->select('SUM(p.amount) as debitAmount');
        $query->where('u.userType = :AGENT');
        $query->andWhere('a.id = :agentId');
        $query->andWhere('p.transactionType = :DR');
        $query->andWhere('p.verified = 1');
        if (!empty($data['start_date'])) {
            $query->andWhere('p.depositDate < :startDate');
            $query->setParameter('startDate', $data['start_date'].' 00:00:00');
        }
        $query->setParameter('AGENT', User::AGENT);
        $query->setParameter('agentId', $data['agent']);
        $query->setParameter('DR', Payment::DR);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getAgentDebitLaserTotal($data)
    {
        $query = $this->createQueryBuilder('p');
        $query->join('p.agent', 'a');
        $query->join('a.user', 'u');
        $query->select('SUM(p.amount) as debitAmount');
        $query->where('u.userType = :AGENT');
        $query->andWhere('a.id = :agentId');
        $query->andWhere('p.transactionType = :DR');
        $query->andWhere('p.verified = 1');
        if (!empty($data['end_date'])) {
            $query->andWhere('p.depositDate < :endDate');
            $query->setParameter('endDate', $data['end_date'].' 23:59:59');
        }
        $query->setParameter('AGENT', User::AGENT);
        $query->setParameter('agentId', $data['agent']);
        $query->setParameter('DR', Payment::DR);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getAgentLaser($data)
    {
        $query = $this->createQueryBuilder('p');
        $query->join('p.agent', 'a');
        $query->join('a.user', 'u');
        $query->leftJoin('p.bankAccount', 'bankAccount');
        $query->leftJoin('bankAccount.branch', 'branch');
        $query->leftJoin('branch.bank', 'bank');
        $query->leftJoin('p.agentBankBranch','agentBank');
        $query->select('u.username');
        $query->addSelect('p.amount');
        $query->addSelect('p.transactionType');
        $query->addSelect('p.remark');
        $query->addSelect('p.depositDate');
        $query->addSelect('agentBank.bank as agentBankName');
        $query->addSelect('agentBank.branch as agentBankBranch');
        $query->addSelect('bankAccount.name AS bankAccountName, bankAccount.code AS bankCode, bank.name AS bankName, branch.name AS branchName');
        $query->where('u.userType = :AGENT');
        $query->andWhere('a.id = :agentId');
        $query->andWhere('p.verified = 1');
        $query->setParameter('AGENT', User::AGENT);
        $query->setParameter('agentId', $data['agent']);
        $this->handleSearchByTwoDate($query, $data['start_date'], $data['end_date']);
        $query->orderBy('p.depositDate', 'Asc');

        return $query->getQuery()->getScalarResult();
    }

    public function getMyPreviousCreditLaserTotal($agentId, $data)
    {
        $query = $this->createQueryBuilder('p');
        $query->join('p.agent', 'a');
        $query->join('a.user', 'u');
        $query->select('SUM(p.amount) as creditAmount');
        $query->where('u.userType = :AGENT');
        $query->andWhere('a.id = :agentId');
        $query->andWhere('p.transactionType = :CR');
        $query->andWhere('p.verified = 1');
        if (!empty($data['start_date'])) {
            $query->andWhere('p.depositDate < :startDate');
            $query->setParameter('startDate', $data['start_date'].' 00:00:00');
        }
        $query->setParameter('AGENT', User::AGENT);
        $query->setParameter('agentId', $agentId);
        $query->setParameter('CR', Payment::CR);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getMyCreditLaserTotal($agentId, $data)
    {
        $query = $this->createQueryBuilder('p');
        $query->join('p.agent', 'a');
        $query->join('a.user', 'u');
        $query->select('SUM(p.amount) as creditAmount');
        $query->where('u.userType = :AGENT');
        $query->andWhere('a.id = :agentId');
        $query->andWhere('p.transactionType = :CR');
        $query->andWhere('p.verified = 1');
        if (!empty($data['end_date'])) {
            $query->andWhere('p.depositDate < :endDate');
            $query->setParameter('endDate', $data['end_date'].' 23:59:59');
        }
        $query->setParameter('AGENT', User::AGENT);
        $query->setParameter('agentId', $agentId);
        $query->setParameter('CR', Payment::CR);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function findByOrdersVerifiedType($order, $transactionType, $verified)
    {
        $query = $this->createQueryBuilder('p');
        $query->join('p.orders', 'o');
        $query->where('o.id = :order');
        $query->andWhere('p.transactionType = :transactionType');
        $query->andWhere('p.verified = :verified');
        $query->setParameter('verified', $verified);
        $query->setParameter('order', $order);
        $query->setParameter('transactionType', $transactionType);

        return $query->getQuery()->getResult();
    }

    public function getMyPreviousDebitLaserTotal($agentId, $data)
    {
        $query = $this->createQueryBuilder('p');
        $query->join('p.agent', 'a');
        $query->join('a.user', 'u');
        $query->select('SUM(p.amount) as debitAmount');
        $query->where('u.userType = :AGENT');
        $query->andWhere('a.id = :agentId');
        $query->andWhere('p.transactionType = :DR');
        $query->andWhere('p.verified = 1');
        if (!empty($data['start_date'])) {
            $query->andWhere('p.depositDate < :startDate');
            $query->setParameter('startDate', $data['start_date'].' 00:00:00');
        }
        $query->setParameter('AGENT', User::AGENT);
        $query->setParameter('agentId', $agentId);
        $query->setParameter('DR', Payment::DR);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getMyDebitLaserTotal($agentId, $data)
    {
        $query = $this->createQueryBuilder('p');
        $query->join('p.agent', 'a');
        $query->join('a.user', 'u');
        $query->select('SUM(p.amount) as debitAmount');
        $query->where('u.userType = :AGENT');
        $query->andWhere('a.id = :agentId');
        $query->andWhere('p.transactionType = :DR');
        $query->andWhere('p.verified = 1');
        if (!empty($data['end_date'])) {
            $query->andWhere('p.depositDate < :endDate');
            $query->setParameter('endDate', $data['end_date'].' 23:59:59');
        }
        $query->setParameter('AGENT', User::AGENT);
        $query->setParameter('agentId', $agentId);
        $query->setParameter('DR', Payment::DR);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getMyLaser($agentId, $data)
    {
        $query = $this->createQueryBuilder('p');
        $query->join('p.agent', 'a');
        $query->join('a.user', 'u');
        $query->select('u.username');
        $query->addSelect('p.amount');
        $query->addSelect('p.transactionType');
        $query->addSelect('p.remark');
        $query->addSelect('p.depositDate');
        $query->where('u.userType = :AGENT');
        $query->andWhere('a.id = :agentId');
        $query->andWhere('p.verified = 1');
        $query->setParameter('AGENT', User::AGENT);
        $query->setParameter('agentId', $agentId);
        $this->handleSearchByTwoDate($query, $data['start_date'], $data['end_date']);
        $query->orderBy('p.depositDate', 'asc');

        return $query->getQuery()->getScalarResult();
    }

    protected function handleSearchByTwoDate($query, $startDate, $endDate)
    {
        if (!empty($startDate) && !empty($endDate)) {
            $query->andWhere('p.depositDate >= :startDate');
            $query->andWhere('p.depositDate <= :endDate');
            $query->setParameter('startDate', $startDate.' 00:00:00');
            $query->setParameter('endDate', $endDate.' 23:59:59');
        } elseif (!empty($startDate) && empty($endDate)){
            $query->andWhere('p.depositDate >= :startDate');
            $query->setParameter('startDate', $startDate.' 00:00:00');
        }
    }

    public function getPaymentsBy($params){
        $qb = $this->createQueryBuilder('p');
        $qb->select('p');

        if (isset($params['orders'])) {
            $orderId = is_array($params['orders']) ? $params['orders'] : array($params['orders']);
            $qb->join('p.orders', 'o');
            $qb->andWhere($qb->expr()->in('o.id', $orderId));
        }

        if (isset($params['verified'])) {
            $qb->andWhere($qb->expr()->eq('p.verified', $params['verified']));
        }

        if (isset($params['transactionType'])) {
            $qb->andWhere($qb->expr()->eq('p.transactionType', '?1'));
            $qb->setParameter('1', $params['transactionType']);
        }

        return $qb->getQuery()->getResult();
    }

    public function createDeliveredProductValue(Delivery $delivery)
    {
        $this->addPaymentByDeliveryItemExtractedSummary(
            $this->extractDeliveryItemSummary($delivery)
        );
    }

    private function extractDeliveryItemSummary(Delivery $delivery)
    {
        $data = [];

        /** @var DeliveryItem $deliveryItem */
        foreach ($delivery->getDeliveryItems() as $deliveryItem) {
            $order = $deliveryItem->getOrder();
            $itemPrice = $deliveryItem->getOrderItem()->getPrice();
            $itemQty = $deliveryItem->getQty();
            $amount = $itemPrice * $itemQty;

            if (!array_key_exists($order->getId(), $data)) {
                $data[$order->getId()] = [];
            }

            $item = $deliveryItem->getOrderItem()->getItem();
            $data[$order->getId()][$item->getId()] = [
                'name' => $item->getName(),
                'qty' => $itemQty,
                'price' => $itemPrice,
                'amount' => $amount,
                'unit' => $item->getItemUnit(),
            ];
        }

        return $data;
    }

    private function addPaymentByDeliveryItemExtractedSummary($data)
    {
        foreach ($data as $orderId => $deliveryItemSummaries) {
            $order = $this->_em->getRepository('RbsSalesBundle:Order')->find($orderId);
            $total = array_sum(array_column($data[$orderId], 'amount'));
            $payment = new Payment();
            $payment->setAgent($order->getAgent());
            $payment->setAmount($total);
            $payment->setDepositedAmount($total);
            $payment->setPaymentMethod(Payment::PAYMENT_METHOD_BANK);
            $payment->setRemark(json_encode($deliveryItemSummaries));
            $payment->setDepositDate(date("Y-m-d"));
            $payment->setTransactionType(Payment::DR);
            $payment->setVerified(true);
            $payment->addOrder($order);

            $this->_em->persist($payment);
            $this->_em->flush();
        }
    }

    public function getPaymentReportData($type, $startDate, $endDate, $agent = null)
    {
        $startDateTime = new \DateTime($startDate);
        $interval = date_diff($startDateTime, new \DateTime($endDate));
        $diff = (int)$interval->format($type == 'monthly' ? '%m' : '%a');
        $intervalType = $type == 'monthly' ? '+1 month' : '+1 day';

        $reportData = [];
        for ($i = 0; $i <= $diff; $i++) {
            $tempDate = $i == 0 ? $startDateTime : $startDateTime->modify($intervalType);
            $key = $type == 'monthly' ? $tempDate->format('F Y') : $tempDate->format('d-m-Y');
            $reportData[$key] = $this->getPaymentReportDateOf(
                $type,
                $tempDate,
                $agent
            );
        }

        return array_filter($reportData);
    }

    public function getPaymentReportDateOf($type, \DateTime $date, $agent)
    {
        if ($type == 'monthly') {
            $start = $date->format('Y-m-1 00:00:00');
            $end = $date->format('Y-m-t 23:59:59');
        } else {
            $start = $date->format('Y-m-d 00:00:00');
            $end = $date->format('Y-m-d 23:59:59');
        }

        $qb = $this->createQueryBuilder('p');
        $qb->join('p.agent', 'agent');
        $qb->join('agent.user', 'user');
        $qb->join('user.profile', 'profile');

        $qb->select('p.createdAt, profile.fullName, agent.agentID, p.agentBank, p.agentBranch, p.amount');

        $qb->where('p.verified = :verified')->setParameter('verified', true);
        $qb->andWhere('p.transactionType = :transactionType')->setParameter('transactionType', Payment::CR);

        $qb->andWhere('p.createdAt BETWEEN :start AND :end');
        $qb->setParameter('start', $start);
        $qb->setParameter('end', $end);

        if ($agent) {
            $qb->andWhere('p.agent = :agent')->setParameter('agent', $agent);
        }

        $result = $qb->getQuery()->getResult();

        if (empty($result)) {
            return [];
        }
        return ['data' => $qb->getQuery()->getResult(), 'start' => $start, 'end' => $end];
    }
}
