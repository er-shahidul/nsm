<?php

namespace Rbs\Bundle\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Rbs\Bundle\UserBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function getAll()
    {
        return $this->findAll();
    }

    public function create($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
    }

    public function delete($data)
    {
        $this->_em->remove($data);
        $this->_em->flush();
    }

    public function update($data)
    {
        $this->_em->persist($data);
        $this->_em->flush();
        return $this->_em;
    }

    public function users()
    {
        $query = $this->createQueryBuilder('u');
        $query->where('u.userType = :User OR u.userType = :Agent');
        $query->setParameter('User', 'User');
        $query->setParameter('Agent', 'Agent');

        return $query->getQuery()->getResult();
    }

    public function findUsersByLocation($zillaId)
    {
        $query = $this->createQueryBuilder('u');
        $query->join('u.zilla', 'z');
        $query->where('z.id = :zilla');
        $query->setParameter('zilla', $zillaId);

        return $query->getQuery()->getResult();
    }

    public function getRsmList()
    {
        $query = $this->createQueryBuilder('u');
        $query->where('u.userType = :RSM');
        $query->andWhere("u.deletedAt IS NULL");
        $query->setParameter('RSM', User::RSM);

        return $query->getQuery()->getResult();
    }

    public function getSrList()
    {
        $query = $this->createQueryBuilder('u');
        $query->where('u.userType = :SR');
        $query->andWhere("u.deletedAt IS NULL");
        $query->setParameter('SR', User::SR);

        return $query->getQuery()->getResult();
    }

    public function findSRByParentId($parentId)
    {
        $query = $this->createQueryBuilder('u');
        $query->where('u.userType = :SR');
        $query->andWhere('u.parentId = :parentId');
        $query->setParameter('SR', User::SR);
        $query->setParameter('parentId', $parentId);

        return $query->getQuery()->getResult();
    }

    public function findAgentsUsingParentId($parentId)
    {
        $query = $this->createQueryBuilder('u');
        $query->where('u.userType = :AGENT');
        $query->andWhere('u.parentId = :parentId');
        $query->setParameter('AGENT', User::AGENT);
        $query->setParameter('parentId', $parentId);

        return $query->getQuery()->getResult();
    }

    public function getNawParentId($zillaId)
    {
        $query = $this->createQueryBuilder('u');
        $query->join('u.zilla', 'z');
        $query->select('u.id');
        $query->where('u.userType = :RSM');
        $query->andWhere('z.id = :zilla');
        $query->setParameter('RSM', User::RSM);
        $query->setParameter('zilla', $zillaId);

        return $query->getQuery()->getResult();
    }

    public function findByPhoneNumber($phoneNumber)
    {
        $query = $this->createQueryBuilder('u');
        $query->join('u.profile', 'p');
        $query->where('p.cellphone = :phoneNumber');
        $query->setParameter('phoneNumber', $phoneNumber);
        $query->setMaxResults(1);

        return $query->getQuery()->getResult();
    }
}
